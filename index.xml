<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rush.now.sh</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Rush.now.sh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Feb 2021 15:25:32 +0800</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>看看被历史淘汰的多路复用系统调用poll的源码</title>
      <link>http://localhost:1313/post/syscall_poll/</link>
      <pubDate>Wed, 24 Feb 2021 15:25:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/syscall_poll/</guid>
      <description>https://elixir.bootlin.com/linux/latest/source/fs/select.c#L1056 我是在上面这个网址看的Linux 5.11.1版本的源码 开始 映入眼帘的是这个系统调用，这个就是poll的系统调用定义 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>无内鬼，来点sync.Pool解读</title>
      <link>http://localhost:1313/post/syncpool/</link>
      <pubDate>Mon, 22 Feb 2021 19:55:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/syncpool/</guid>
      <description>sync.Pool是Go中常常用来做缓存的一个API，从New讲起 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type Pool struct { noCopy noCopy local unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal localSize uintptr // size of the</description>
    </item>
    
    <item>
      <title>拥塞控制</title>
      <link>http://localhost:1313/post/congestigon_control/</link>
      <pubDate>Wed, 10 Feb 2021 22:11:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/congestigon_control/</guid>
      <description>TCP的两个窗口 RWND ，Receiver Window CWND, Congestion Window RENO Reno的假设 丢包一定因为网络出现拥塞 网络的RTT和带宽不容易变化 将速率减半后一定能清空Buf</description>
    </item>
    
    <item>
      <title>输入URL后会发生什么</title>
      <link>http://localhost:1313/post/enterurl/</link>
      <pubDate>Tue, 02 Feb 2021 13:49:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/enterurl/</guid>
      <description>输入URL后会发生什么 调用浏览器渲染引擎（譬如V8），解析网络请求，解析执行JS，UI后端渲染 从URL中解析域名，根据域名查询DNS 在浏览器</description>
    </item>
    
  </channel>
</rss>
