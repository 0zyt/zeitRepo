<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rush.vercel.app</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Rush.vercel.app</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 05 May 2021 14:21:49 +0800</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ksm拆解</title>
      <link>http://localhost:1313/post/ksm/</link>
      <pubDate>Wed, 05 May 2021 14:21:49 +0800</pubDate>
      
      <guid>http://localhost:1313/post/ksm/</guid>
      <description>核心流程 在ksm的main中有三块启动服务的代码，我们只关注获得metrics的部分 1 2 3 4 5 6 7 8 9 10 //main.go 168行 // Run MetricsHandler { ctxMetricsHandler, cancel := context.WithCancel(ctx) g.Add(func() error { return m.Run(ctxMetricsHandler)</description>
    </item>
    
    <item>
      <title>从TCP FAST OPEN看TCP三次握手</title>
      <link>http://localhost:1313/post/tfo-3way/</link>
      <pubDate>Mon, 08 Mar 2021 11:29:41 +0800</pubDate>
      
      <guid>http://localhost:1313/post/tfo-3way/</guid>
      <description>TCP三次握手是面试的一个常考点，常常会问：不三次握手行不行？为什么是三次握手不是更多或者更少？ 八股文答案就不说了，网上很多。 但是TCP确实</description>
    </item>
    
    <item>
      <title>User-Mode Scheduling &amp; Coroutine &amp; Goruntine</title>
      <link>http://localhost:1313/post/umsandfiber/</link>
      <pubDate>Sat, 06 Mar 2021 12:15:41 +0800</pubDate>
      
      <guid>http://localhost:1313/post/umsandfiber/</guid>
      <description>今天学习了[Windows文档][https://docs.microsoft.com/zh-cn/windows/win32/procth</description>
    </item>
    
    <item>
      <title>看看被历史淘汰的多路复用系统调用poll的源码</title>
      <link>http://localhost:1313/post/syscall_poll/</link>
      <pubDate>Wed, 24 Feb 2021 15:25:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/syscall_poll/</guid>
      <description>https://elixir.bootlin.com/linux/latest/source/fs/select.c#L1056 我是在上面这个网址看的Linux 5.11.1版本的源码 开始 映入眼帘的是这个系统调用，这个就是poll的系统调用定义 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>无内鬼，来点sync.Pool解读</title>
      <link>http://localhost:1313/post/syncpool/</link>
      <pubDate>Mon, 22 Feb 2021 19:55:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/syncpool/</guid>
      <description>sync.Pool是Go中常常用来做缓存的一个API，从New讲起 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type Pool struct { noCopy noCopy local unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal localSize uintptr // size of the</description>
    </item>
    
    <item>
      <title>拥塞控制</title>
      <link>http://localhost:1313/post/congestigon_control/</link>
      <pubDate>Wed, 10 Feb 2021 22:11:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/congestigon_control/</guid>
      <description>TCP的两个窗口 RWND ，Receiver Window CWND, Congestion Window RENO Reno的假设 丢包一定因为网络出现拥塞 网络的RTT和带宽不容易变化 将速率减半后一定能清空Buf</description>
    </item>
    
    <item>
      <title>输入URL后会发生什么</title>
      <link>http://localhost:1313/post/enterurl/</link>
      <pubDate>Tue, 02 Feb 2021 13:49:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/enterurl/</guid>
      <description>输入URL后会发生什么 调用浏览器渲染引擎（譬如V8），解析网络请求，解析执行JS，UI后端渲染 从URL中解析域名，根据域名查询DNS 在浏览器</description>
    </item>
    
  </channel>
</rss>
