<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rush.vercel.app</title>
    <link>https://Rush.vercel.app/</link>
    <description>Recent content on Rush.vercel.app</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 May 2021 16:17:11 +0800</lastBuildDate><atom:link href="https://Rush.vercel.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kube-state-metrics流程</title>
      <link>https://Rush.vercel.app/posts/ksm/</link>
      <pubDate>Wed, 05 May 2021 16:17:11 +0800</pubDate>
      
      <guid>https://Rush.vercel.app/posts/ksm/</guid>
      <description>核心流程 在ksm的main中有三块启动服务的代码，我们只关注获得metrics的部分
//main.go 168行 // Run MetricsHandler 	{ 	ctxMetricsHandler, cancel := context.WithCancel(ctx) 	g.Add(func() error { 	return m.Run(ctxMetricsHandler) 	}, func(error) { 	cancel() 	}) 	} //main.go 188行 // Run Telemetry server 	{ 	g.Add(func() error { 	klog.Infof(&amp;#34;Starting kube-state-metrics self metrics server: %s&amp;#34;, telemetryListenAddress) 	return web.ListenAndServe(&amp;amp;telemetryServer, tlsConfig, promLogger) 	}, func(error) { 	ctxShutDown, cancel := context.WithTimeout(ctx, 3*time.Second) 	defer cancel() 	telemetryServer.</description>
    </item>
    
    <item>
      <title>TCP FAST OPEN看三次握手</title>
      <link>https://Rush.vercel.app/posts/tfo-3way/</link>
      <pubDate>Mon, 08 Mar 2021 16:26:36 +0800</pubDate>
      
      <guid>https://Rush.vercel.app/posts/tfo-3way/</guid>
      <description>TCP三次握手是面试的一个常考点，常常会问：不三次握手行不行？为什么是三次握手不是更多或者更少？ 八股文答案就不说了，网上很多。 但是TCP确实是可以不三次握手的，那就是TFO（TCP FAST OPEN），TFO会在第一次三次握手时，在SYN-ACK这个报文上带上一个Fast Open Cookie，让客户端保存，客户端第二次访问服务端时候，发SYN带上这个Cookie，Cookie中维护了上一次连接中建立的信息，就可以只握手一次拉！1个RTT完成握手。 那么，我们可以想到，后续几次握手的关键信息，就在这个Cookie里，也就是说，是这个Cookie里的东西让后两次握手避免了。
探索RFC7413 https://tools.ietf.org/html/rfc7413
TOC只能是根据服务端Mac生成的，会验证客户端的源IP地址、会有一个过期时间（安全考虑）并且可以定期更新
服务端操作
- GetCookie(IP_Address): returns a (new) cookie. - IsCookieValid(IP_Address, Cookie): checks if the cookie is valid, i.e., it has not expired and the cookie authenticates the client IP address. 会保存TCP options
客户端的TFO依赖客户端与服务器的IP地址，客户端会保存最近接收的一对Cookie，客户端也缓存MSS，因为MSS会在SYN-ACK包中，所以可以提高性能，如果没有缓存会用默认的IPV4 536 bytes和IPV6 1220 bytes 大小MSS，如果太大可能会在MTU分片抵消TFO优势还有重传等其他副作用。
客户端还要缓存负面的响应避免可能的连接失败，比如服务器没确认的SYN中的数据，ICMP错误消息和完全没有来自服务端的SYN-ACK响应，比如中间设备或者防火墙导致的SYN丢包，这时应该暂时关闭TFO在这个特别的地址上（目的IP和端口），所以也要缓存目标端口。
完 我没逐字逐句看，就看到这么多了，可能还很多不完善</description>
    </item>
    
    <item>
      <title>User-Mode Scheduling &amp; Coroutine &amp; Goruntine</title>
      <link>https://Rush.vercel.app/posts/umsandfiber/</link>
      <pubDate>Sat, 06 Mar 2021 16:26:29 +0800</pubDate>
      
      <guid>https://Rush.vercel.app/posts/umsandfiber/</guid>
      <description>今天学习了[Windows文档][https://docs.microsoft.com/zh-cn/windows/win32/procthread/about-processes-and-threads]，发现了一个新的概念，叫UMS(User-Mode Scheduling)，了解之后发现，这个东西很像Goroutine,我本人对于协程的认知其实也就是个由Runtime/VM/Framework/Programming language提供的用户态线程调度器，当然Goroutine是特例或者说不是协程，但是在Windows中，分出了两个东西，一个叫UMS，一个叫Fiber.Fiber也就是咱们更加熟知的“协程”，由手动管理调度的协程（我这里想到的是Kotlin Coroutine的suspend和resume)。</description>
    </item>
    
    <item>
      <title>Syscall_poll代码解读</title>
      <link>https://Rush.vercel.app/posts/syscall_poll/</link>
      <pubDate>Wed, 24 Feb 2021 16:25:56 +0800</pubDate>
      
      <guid>https://Rush.vercel.app/posts/syscall_poll/</guid>
      <description>https://elixir.bootlin.com/linux/latest/source/fs/select.c#L1056
我是在上面这个网址看的Linux 5.11.1版本的源码
开始 映入眼帘的是这个系统调用，这个就是poll的系统调用定义
SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, unsigned int, nfds, 	int, timeout_msecs) { 	struct timespec64 end_time, *to = NULL; 	int ret;  	if (timeout_msecs &amp;gt;= 0) { 	to = &amp;amp;end_time; 	poll_select_set_timeout(to, timeout_msecs / MSEC_PER_SEC, 	NSEC_PER_MSEC * (timeout_msecs % MSEC_PER_SEC)); 	}  	ret = do_sys_poll(ufds, nfds, to);  	if (ret == -ERESTARTNOHAND) { 	struct restart_block *restart_block;  	restart_block = &amp;amp;current-&amp;gt;restart_block; 	restart_block-&amp;gt;fn = do_restart_poll; 	restart_block-&amp;gt;poll.</description>
    </item>
    
    <item>
      <title>Sync.Pool解读</title>
      <link>https://Rush.vercel.app/posts/syncpool/</link>
      <pubDate>Mon, 22 Feb 2021 16:26:08 +0800</pubDate>
      
      <guid>https://Rush.vercel.app/posts/syncpool/</guid>
      <description>sync.Pool是Go中常常用来做缓存的一个API，从New讲起
type Pool struct {  noCopy noCopy   local unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal  localSize uintptr // size of the local array   victim unsafe.Pointer // local from previous cycle  victimSize uintptr // size of victims array   // New optionally specifies a function to generate  // a value when Get would otherwise return nil.  // It may not be changed concurrently with calls to Get.</description>
    </item>
    
    <item>
      <title>拥塞控制</title>
      <link>https://Rush.vercel.app/posts/congestioncontrol/</link>
      <pubDate>Wed, 10 Feb 2021 16:26:58 +0800</pubDate>
      
      <guid>https://Rush.vercel.app/posts/congestioncontrol/</guid>
      <description>TCP的两个窗口  RWND ，Receiver Window CWND, Congestion Window  RENO Reno的假设  丢包一定因为网络出现拥塞 网络的RTT和带宽不容易变化 将速率减半后一定能清空Buffer  Reno的问题  受链路Buffer影响很大 对高带宽网络利用率低（每次+1） 对共享链路的其他RTT较大的连接不友好  BIC CUBIC CUBIC优点  RTT无关，更公平 更适合BDP大的网络  CUBIC缺点  当Bandwidth变化时，CWND跟随慢 更容易熬制bufferbloat  Vegas 并没有被用起来
Vegas特点  会监控RTT 会尝试增加发送速率来探测链路带宽 如果丢包或者RTT增大就降低发送速率  Vegas缺点  CWND增长是线性的，不能很好利用网络传输速率 不能跟基于丢包的算法共存  BBR </description>
    </item>
    
    <item>
      <title>输入url会发生什么</title>
      <link>https://Rush.vercel.app/posts/enterurl/</link>
      <pubDate>Tue, 02 Feb 2021 16:26:43 +0800</pubDate>
      
      <guid>https://Rush.vercel.app/posts/enterurl/</guid>
      <description>输入URL后会发生什么  调用浏览器渲染引擎（譬如V8），解析网络请求，解析执行JS，UI后端渲染 从URL中解析域名，根据域名查询DNS  在浏览器DNS缓存中查询 在操作系统DNS缓存中搜索 系统Hosts文件中查询 向本地DNS服务器发起Query请求（UDP）   与Server进行TCP握手（+TLS握手） 构造HTTP请求，填充上下文到HTTP头 发送HTTP请求，收到HTML页面作为响应 浏览器引擎解析响应，并渲染至界面，根据HTML文档中超链接再构造HTTP请求 发起获取页面资源的HTTP请求   三次握手  C: SYN-&amp;gt; S: &amp;lt;-SYN,ACK C: ACK-&amp;gt;   四次挥手  FIN-&amp;gt; &amp;lt;-ACK &amp;lt;-FIN,ACK ACK-&amp;gt;   状态机图   +---------+ ---------\ active OPEN | CLOSED | \ ----------- +---------+&amp;lt;---------\ \ create TCB | ^ \ \ snd SYN passive OPEN | | CLOSE \ \ ------------ | | ---------- \ \ create TCB | | delete TCB \ \ V | \ \ +---------+ CLOSE | \ | LISTEN | ---------- | | +---------+ delete TCB | | rcv SYN | | SEND | | ----------- | | ------- | V +---------+ snd SYN,ACK / \ snd SYN +---------+ | |&amp;lt;----------------- ------------------&amp;gt;| | | SYN | rcv SYN | SYN | | RCVD |&amp;lt;-----------------------------------------------| SENT | | | snd ACK | | | |------------------ -------------------| | +---------+ rcv ACK of SYN \ / rcv SYN,ACK +---------+ | -------------- | | ----------- | x | | snd ACK | V V | CLOSE +---------+ | ------- | ESTAB | | snd FIN +---------+ | CLOSE | | rcv FIN V ------- | | ------- +---------+ snd FIN / \ snd ACK +---------+ | FIN |&amp;lt;----------------- ------------------&amp;gt;| CLOSE | | WAIT-1 |------------------ | WAIT | +---------+ rcv FIN \ +---------+ | rcv ACK of FIN ------- | CLOSE | | -------------- snd ACK | ------- | V x V snd FIN V +---------+ +---------+ +---------+ |FINWAIT-2| | CLOSING | | LAST-ACK| +---------+ +---------+ +---------+ | rcv ACK of FIN | rcv ACK of FIN | | rcv FIN -------------- | Timeout=2MSL -------------- | | ------- x V ------------ x V \ snd ACK +---------+delete TCB +---------+ ------------------------&amp;gt;|TIME WAIT|------------------&amp;gt;| CLOSED | +---------+ +---------+ </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Rush.vercel.app/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Rush.vercel.app/about/</guid>
      <description>目前做云原生开发</description>
    </item>
    
  </channel>
</rss>
